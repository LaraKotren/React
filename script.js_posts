document.addEventListener('DOMContentLoaded', function() {
    const usersList = document.getElementById('usersList');
    const postsContainer = document.getElementById('postsContainer');
    const searchInput = document.getElementById('searchInput');
    
    // Переменные для хранения данных
    let allUsers = [];
    let allPosts = [];

    // Загружаем данные пользователей и постов одновременно
    Promise.all([
        fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json()),
        fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json())
    ])
    .then(([users, posts]) => {
        // Сохраняем полученные данные
        allUsers = users;
        allPosts = posts;
        // Отображаем пользователей
        renderUsers(users);
    })
    .catch(error => console.error('Error fetching data:', error));

    // Обработчик события ввода в поле поиска
    searchInput.addEventListener('input', function() {
        // Получаем значение поиска и приводим к нижнему регистру
        const searchTerm = this.value.toLowerCase();
        // Фильтруем пользователей по имени
        const filteredUsers = allUsers.filter(user => 
            user.name.toLowerCase().includes(searchTerm)
        );
        // Отображаем отфильтрованный список
        renderUsers(filteredUsers);
    });

    // Функция отображения списка пользователей
    function renderUsers(users) {
        // Очищаем контейнер
        usersList.innerHTML = '';
        
        // Для каждого пользователя создаем элемент
        users.forEach(user => {
            const userItem = document.createElement('div');
            userItem.className = 'user-item';
            userItem.textContent = user.name;
            
            // Добавляем обработчик клика
            userItem.addEventListener('click', function() {
                // Удаляем класс active у всех пользователей
                document.querySelectorAll('.user-item').forEach(item => {
                    item.classList.remove('active');
                });
                // Добавляем класс active текущему пользователю
                this.classList.add('active');
                // Показываем посты выбранного пользователя
                showUserPosts(user.id);
            });
            
            // Добавляем пользователя в список
            usersList.appendChild(userItem);
        });
        
        // Автоматически выбираем первого пользователя (если есть)
        if (users.length > 0) {
            usersList.firstChild.click();
        }
    }

    // Функция отображения постов пользователя
    function showUserPosts(userId) {
        // Фильтруем посты по ID пользователя
        const userPosts = allPosts.filter(post => post.userId === userId);
        
        // Очищаем контейнер
        postsContainer.innerHTML = '';
        
        // Если постов нет - показываем сообщение
        if (userPosts.length === 0) {
            postsContainer.innerHTML = '<p>No posts found for this user.</p>';
            return;
        }
        
        // Для каждого поста создаем карточку
        userPosts.forEach(post => {
            const postCard = document.createElement('div');
            postCard.className = 'post-card';
            
            // Заполняем карточку данными
            postCard.innerHTML = `
                <div class="post-title">${post.title}</div>
                <div class="post-body">${post.body}</div>
            `;
            
            // Добавляем карточку в контейнер
            postsContainer.appendChild(postCard);
        });
    }
});
